#!/usr/bin/env python3
"""
Script ƒë·ªÉ ch·∫°y Trading Bot v·ªõi Real-time Performance Monitoring
"""
import asyncio
import os
import sys
import logging
from pathlib import Path

# Th√™m th∆∞ m·ª•c src v√†o Python path
sys.path.append(str(Path(__file__).parent / "src"))

from main_with_quantitative import main
from performance_dashboard_enhanced import EnhancedPerformanceDashboard
from src.quantitative.real_time_performance_monitor import WorldQuantRealTimePerformanceMonitor

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/trading_bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def run_performance_dashboard():
    """Ch·∫°y Performance Dashboard"""
    try:
        dashboard = EnhancedPerformanceDashboard()
        logger.info("üöÄ Starting Performance Dashboard...")
        
        # Ch·∫°y dashboard trong thread ri√™ng v√¨ Dash kh√¥ng async
        import threading
        def run_dashboard():
            dashboard.run(host='localhost', port=8050, debug=False)
        
        dashboard_thread = threading.Thread(target=run_dashboard, daemon=True)
        dashboard_thread.start()
        
        logger.info("‚úÖ Performance Dashboard started successfully")
        
        # Gi·ªØ task n√†y ch·∫°y
        while True:
            await asyncio.sleep(1)
            
    except Exception as e:
        logger.error(f"‚ùå Error starting Performance Dashboard: {e}")

async def run_real_time_monitor():
    """Ch·∫°y Real-time Performance Monitor"""
    try:
        monitor = WorldQuantRealTimePerformanceMonitor()
        logger.info("üìä Starting Real-time Performance Monitor...")
        await monitor.initialize()
        logger.info("‚úÖ Real-time Performance Monitor started successfully")
        
        # Gi·ªØ monitor ch·∫°y
        while True:
            await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"‚ùå Error starting Real-time Performance Monitor: {e}")

async def run_bot_with_monitoring():
    """Ch·∫°y bot v·ªõi performance monitoring"""
    try:
        logger.info("ü§ñ Starting Trading Bot with Quantitative Analysis...")
        
        # T·∫°o tasks cho bot v√† monitoring
        tasks = [
            asyncio.create_task(main()),  # Bot ch√≠nh
            asyncio.create_task(run_real_time_monitor()),  # Real-time monitor
            asyncio.create_task(run_performance_dashboard()),  # Performance dashboard
        ]
        
        # Ch·∫°y t·∫•t c·∫£ tasks
        await asyncio.gather(*tasks)
        
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Error running bot: {e}")

def check_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng tr∆∞·ªõc khi ch·∫°y"""
    logger.info("üîç Checking environment...")
    
    # Ki·ªÉm tra file .env
    if not os.path.exists('.env'):
        logger.warning("‚ö†Ô∏è  File .env not found. Please create it with your API keys.")
        logger.info("üìù See SETUP_GUIDE.md for configuration details.")
        return False
    
    # Ki·ªÉm tra th∆∞ m·ª•c logs
    logs_dir = Path('logs')
    logs_dir.mkdir(exist_ok=True)
    
    # Ki·ªÉm tra dependencies
    try:
        import pandas
        import numpy
        import asyncio
        import websockets
        import psutil
        logger.info("‚úÖ All required dependencies are installed")
    except ImportError as e:
        logger.error(f"‚ùå Missing dependency: {e}")
        logger.info("üí° Run: pip install -r requirements.txt")
        return False
    
    return True

def main_sync():
    """Main function ƒë·ªÉ ch·∫°y bot"""
    print("üöÄ Trading Bot with Real-time Performance Monitoring")
    print("=" * 60)
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not check_environment():
        print("\n‚ùå Environment check failed. Please fix the issues above.")
        return
    
    print("\n‚úÖ Environment check passed!")
    print("\nüìä Available monitoring features:")
    print("   ‚Ä¢ Real-time Performance Dashboard (http://localhost:8050)")
    print("   ‚Ä¢ WebSocket Performance Data (ws://localhost:8765)")
    print("   ‚Ä¢ Financial Metrics Tracking")
    print("   ‚Ä¢ System Health Monitoring")
    print("   ‚Ä¢ Risk Management Alerts")
    
    print("\nüéØ Starting bot in 3 seconds...")
    for i in range(3, 0, -1):
        print(f"   {i}...")
        import time
        time.sleep(1)
    
    # Ch·∫°y bot
    try:
        asyncio.run(run_bot_with_monitoring())
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")

if __name__ == "__main__":
    main_sync() 