#!/usr/bin/env python3
"""
Script to analyze the validation logic and explain why most pairs fail quantitative validation
"""

import asyncio
import sys
import os
import logging
import pandas as pd
import numpy as np
from scipy import stats
from datetime import datetime
from typing import Dict, Optional

# Add the src directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.quantitative.statistical_validator import StatisticalSignalValidator
from src.quantitative.quantitative_trading_system import QuantitativeTradingSystem

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_validation_criteria():
    """Analyze the validation criteria and explain the logic."""
    logger.info("=== PH√ÇN T√çCH LOGIC VALIDATION ===")
    
    # C√°c ti√™u ch√≠ validation hi·ªán t·∫°i
    criteria = {
        'min_p_value': 0.05,  # p-value ph·∫£i < 0.05 (statistically significant)
        'min_t_stat': 2.0,    # t-statistic ph·∫£i > 2.0 (strong signal)
        'min_sharpe_ratio': 0.5,  # Sharpe ratio ph·∫£i > 0.5 (good risk-adjusted return)
        'max_drawdown': 0.15   # Max drawdown ph·∫£i < 15% (risk control)
    }
    
    logger.info("üìä C√ÅC TI√äU CH√ç VALIDATION HI·ªÜN T·∫†I:")
    for criterion, value in criteria.items():
        logger.info(f"  - {criterion}: {value}")
    
    logger.info("\nüîç LOGIC VALIDATION:")
    logger.info("Signal ƒë∆∞·ª£c coi l√† VALID khi T·∫§T C·∫¢ c√°c ƒëi·ªÅu ki·ªán sau ƒë·ªÅu th·ªèa m√£n:")
    logger.info("  1. p_value < 0.05 (statistically significant)")
    logger.info("  2. |t_statistic| > 2.0 (strong signal)")
    logger.info("  3. sharpe_ratio > 0.5 (good risk-adjusted return)")
    logger.info("  4. max_drawdown < 0.15 (risk control)")
    
    return criteria

def test_validation_with_different_signals():
    """Test validation with different signal strengths."""
    logger.info("\n=== TEST VALIDATION V·ªöI C√ÅC SIGNAL KH√ÅC NHAU ===")
    
    validator = StatisticalSignalValidator()
    
    # Test cases v·ªõi c√°c signal strength kh√°c nhau
    test_cases = [
        {'strength': 0.1, 'confidence': 0.3, 'description': 'Weak signal'},
        {'strength': 0.3, 'confidence': 0.5, 'description': 'Moderate signal'},
        {'strength': 0.5, 'confidence': 0.7, 'description': 'Strong signal'},
        {'strength': 0.7, 'confidence': 0.8, 'description': 'Very strong signal'},
        {'strength': 0.9, 'confidence': 0.9, 'description': 'Extremely strong signal'}
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        logger.info(f"\nüß™ Test Case {i}: {test_case['description']}")
        logger.info(f"   Signal strength: {test_case['strength']}")
        logger.info(f"   Confidence: {test_case['confidence']}")
        
        # Validate signal
        validation_result = validator.validate_signal(test_case)
        
        logger.info(f"   üìà Validation Results:")
        logger.info(f"     - is_valid: {validation_result['is_valid']}")
        logger.info(f"     - p_value: {validation_result['p_value']:.4f}")
        logger.info(f"     - t_statistic: {validation_result['t_statistic']:.4f}")
        logger.info(f"     - sharpe_ratio: {validation_result['sharpe_ratio']:.4f}")
        logger.info(f"     - max_drawdown: {validation_result['max_drawdown']:.4f}")
        
        # Analyze why it passed or failed
        if validation_result['is_valid']:
            logger.info(f"   ‚úÖ PASSED: Signal meets all criteria")
        else:
            logger.info(f"   ‚ùå FAILED: Signal does not meet all criteria")
            if validation_result['p_value'] >= 0.05:
                logger.info(f"     - p_value {validation_result['p_value']:.4f} >= 0.05 (not statistically significant)")
            if abs(validation_result['t_statistic']) < 2.0:
                logger.info(f"     - |t_statistic| {abs(validation_result['t_statistic']):.4f} < 2.0 (weak signal)")
            if validation_result['sharpe_ratio'] <= 0.5:
                logger.info(f"     - sharpe_ratio {validation_result['sharpe_ratio']:.4f} <= 0.5 (poor risk-adjusted return)")
            if validation_result['max_drawdown'] >= 0.15:
                logger.info(f"     - max_drawdown {validation_result['max_drawdown']:.4f} >= 0.15 (high risk)")

def analyze_synthetic_returns_generation():
    """Analyze how synthetic returns are generated."""
    logger.info("\n=== PH√ÇN T√çCH SINH D·ªÆ LI·ªÜU SYNTHETIC RETURNS ===")
    
    validator = StatisticalSignalValidator()
    
    # Test v·ªõi c√°c signal kh√°c nhau
    test_signals = [
        {'strength': 0.1, 'confidence': 0.3},
        {'strength': 0.5, 'confidence': 0.7},
        {'strength': 0.9, 'confidence': 0.9}
    ]
    
    for i, signal in enumerate(test_signals, 1):
        logger.info(f"\nüìä Test {i}: Signal {signal}")
        
        # Generate synthetic returns
        returns = validator._generate_synthetic_returns(signal)
        
        logger.info(f"   Generated returns statistics:")
        logger.info(f"     - Mean: {np.mean(returns):.6f}")
        logger.info(f"     - Std: {np.std(returns):.6f}")
        logger.info(f"     - Min: {np.min(returns):.6f}")
        logger.info(f"     - Max: {np.max(returns):.6f}")
        
        # Calculate expected return based on formula
        expected_return = signal['strength'] * signal['confidence'] * 0.02
        logger.info(f"   Expected return (formula): {expected_return:.6f}")
        logger.info(f"   Actual mean return: {np.mean(returns):.6f}")

def suggest_validation_improvements():
    """Suggest improvements to make validation more realistic."""
    logger.info("\n=== ƒê·ªÄ XU·∫§T C·∫¢I THI·ªÜN VALIDATION ===")
    
    logger.info("üîß C√ÅC V·∫§N ƒê·ªÄ HI·ªÜN T·∫†I:")
    logger.info("1. Ti√™u ch√≠ qu√° nghi√™m ng·∫∑t cho trading bot th·ª±c t·∫ø")
    logger.info("2. Synthetic returns kh√¥ng ph·∫£n √°nh ƒë√∫ng th·ªã tr∆∞·ªùng th·ª±c")
    logger.info("3. Thi·∫øu context v·ªÅ market conditions")
    logger.info("4. Kh√¥ng c√≥ adaptive thresholds")
    
    logger.info("\nüí° ƒê·ªÄ XU·∫§T C·∫¢I THI·ªÜN:")
    logger.info("1. Gi·∫£m b·ªõt ti√™u ch√≠ validation:")
    logger.info("   - min_p_value: 0.05 ‚Üí 0.1 (less strict)")
    logger.info("   - min_t_stat: 2.0 ‚Üí 1.5 (more realistic)")
    logger.info("   - min_sharpe_ratio: 0.5 ‚Üí 0.2 (more achievable)")
    logger.info("   - max_drawdown: 0.15 ‚Üí 0.25 (more realistic)")
    
    logger.info("\n2. Th√™m adaptive validation:")
    logger.info("   - ƒêi·ªÅu ch·ªânh thresholds d·ª±a tr√™n market volatility")
    logger.info("   - S·ª≠ d·ª•ng real market data thay v√¨ synthetic")
    logger.info("   - Th√™m market regime detection")
    
    logger.info("\n3. C·∫£i thi·ªán signal generation:")
    logger.info("   - S·ª≠ d·ª•ng real historical data")
    logger.info("   - Th√™m market microstructure analysis")
    logger.info("   - Implement proper backtesting")

def test_relaxed_validation():
    """Test with relaxed validation criteria."""
    logger.info("\n=== TEST V·ªöI TI√äU CH√ç VALIDATION N·ªöI L·ªéNG ===")
    
    # T·∫°o validator v·ªõi ti√™u ch√≠ n·ªõi l·ªèng
    relaxed_validator = StatisticalSignalValidator(
        min_p_value=0.1,  # N·ªõi l·ªèng t·ª´ 0.05
        min_t_stat=1.5    # N·ªõi l·ªèng t·ª´ 2.0
    )
    
    # Override validation logic ƒë·ªÉ n·ªõi l·ªèng th√™m
    def relaxed_validate_signal(self, signal_data, historical_returns=None):
        try:
            results = {
                'is_valid': False,
                'p_value': None,
                't_statistic': None,
                'sharpe_ratio': None,
                'information_ratio': None,
                'calmar_ratio': None,
                'sortino_ratio': None,
                'max_drawdown': None,
                'volatility': None,
                'skewness': None,
                'kurtosis': None
            }
            
            if historical_returns is None:
                historical_returns = self._generate_synthetic_returns(signal_data)
            
            # Perform statistical tests
            t_stat, p_value = stats.ttest_1samp(historical_returns, 0)
            
            # Calculate risk-adjusted metrics
            sharpe_ratio = self._calculate_sharpe_ratio(historical_returns)
            information_ratio = self._calculate_information_ratio(historical_returns)
            sortino_ratio = self._calculate_sortino_ratio(historical_returns)
            calmar_ratio = self._calculate_calmar_ratio(historical_returns)
            
            # Calculate additional metrics
            max_drawdown = self._calculate_max_drawdown(historical_returns)
            volatility = float(np.std(historical_returns) * np.sqrt(252))
            skewness = stats.skew(historical_returns)
            kurtosis = stats.kurtosis(historical_returns)
            
            # RELAXED CRITERIA
            is_valid = (p_value < 0.1 and  # N·ªõi l·ªèng t·ª´ 0.05
                       abs(t_stat) > 1.5 and  # N·ªõi l·ªèng t·ª´ 2.0
                       sharpe_ratio > 0.2 and  # N·ªõi l·ªèng t·ª´ 0.5
                       max_drawdown < 0.25)    # N·ªõi l·ªèng t·ª´ 0.15
            
            results.update({
                'is_valid': is_valid,
                'p_value': p_value,
                't_statistic': t_stat,
                'sharpe_ratio': sharpe_ratio,
                'information_ratio': information_ratio,
                'sortino_ratio': sortino_ratio,
                'calmar_ratio': calmar_ratio,
                'max_drawdown': max_drawdown,
                'volatility': volatility,
                'skewness': skewness,
                'kurtosis': kurtosis
            })
            
            return results
            
        except Exception as e:
            logger.error(f"Error in relaxed signal validation: {str(e)}")
            return {'is_valid': False, 'error': str(e)}
    
    # Test v·ªõi relaxed criteria
    test_signals = [
        {'strength': 0.3, 'confidence': 0.5, 'description': 'Moderate signal'},
        {'strength': 0.5, 'confidence': 0.7, 'description': 'Strong signal'},
        {'strength': 0.7, 'confidence': 0.8, 'description': 'Very strong signal'}
    ]
    
    for i, test_case in enumerate(test_signals, 1):
        logger.info(f"\nüß™ Relaxed Test {i}: {test_case['description']}")
        
        # S·ª≠ d·ª•ng logic validation n·ªõi l·ªèng
        validation_result = relaxed_validate_signal(relaxed_validator, test_case)
        
        logger.info(f"   üìà Relaxed Validation Results:")
        logger.info(f"     - is_valid: {validation_result['is_valid']}")
        logger.info(f"     - p_value: {validation_result['p_value']:.4f} (threshold: 0.1)")
        logger.info(f"     - t_statistic: {validation_result['t_statistic']:.4f} (threshold: 1.5)")
        logger.info(f"     - sharpe_ratio: {validation_result['sharpe_ratio']:.4f} (threshold: 0.2)")
        logger.info(f"     - max_drawdown: {validation_result['max_drawdown']:.4f} (threshold: 0.25)")
        
        if validation_result['is_valid']:
            logger.info(f"   ‚úÖ PASSED with relaxed criteria")
        else:
            logger.info(f"   ‚ùå Still FAILED even with relaxed criteria")

async def main():
    """Run the analysis."""
    logger.info("üîç PH√ÇN T√çCH LOGIC VALIDATION V√Ä L√ù DO FAILED")
    
    # Ph√¢n t√≠ch ti√™u ch√≠ validation
    analyze_validation_criteria()
    
    # Test v·ªõi c√°c signal kh√°c nhau
    test_validation_with_different_signals()
    
    # Ph√¢n t√≠ch synthetic returns
    analyze_synthetic_returns_generation()
    
    # ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
    suggest_validation_improvements()
    
    # Test v·ªõi ti√™u ch√≠ n·ªõi l·ªèng
    test_relaxed_validation()
    
    logger.info("\nüéØ K·∫æT LU·∫¨N:")
    logger.info("H·∫ßu h·∫øt c√°c pairs failed validation v√¨:")
    logger.info("1. Ti√™u ch√≠ validation qu√° nghi√™m ng·∫∑t cho trading bot th·ª±c t·∫ø")
    logger.info("2. Synthetic returns kh√¥ng ph·∫£n √°nh ƒë√∫ng market conditions")
    logger.info("3. Thi·∫øu adaptive thresholds cho c√°c market conditions kh√°c nhau")
    logger.info("4. C·∫ßn c·∫£i thi·ªán signal generation v√† validation logic")

if __name__ == "__main__":
    asyncio.run(main()) 